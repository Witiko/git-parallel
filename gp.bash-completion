################################################################################
#
# This file is part of Git-parallel.
# Copyright (C) 2016 Vít Novotný
# 
# Git-parallel is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################

# `git parallel` and `git-parallel` autocompletion.
_git_parallel() {
	COMP_CWORD=$(($COMP_CWORD-1))
	COMP_WORDS=(gp "${COMP_WORDS[@]:2}")
	_gp
}

# `gp` autocompletion. 
_gp() {
	local OPTS=()
	local IFS=$' \t\n'

	if [[ $COMP_CWORD -le 1 ]]; then
		# Perform completion for the base command.
		OPTS=(help --version -v --help -h)
		if [[ -d .gitparallel ]]; then
			OPTS+=(co checkout cr create do ls list rm remove fe foreach)
		else
			OPTS+=(i init)
		fi
	else
		local REPOS=" `gp list 2>/dev/null` "
		# Perform completion for subcommands.
		case "${COMP_WORDS[1]}" in
			co) ;& checkout)
				OPTS=(-c --create -m --migrate -C --clobber)
				# Suggest repository names, if no repository has yet been specified.
				local REPO_SPECIFIED=false
				for ((I = 2; I < $COMP_CWORD; I++)); do
					if grep -qF " ${COMP_WORDS[$I]} " <<<"$REPOS"; then
						local REPO_SPECIFIED=true
						break
					fi
				done
				if ! $REPO_SPECIFIED; then
					OPTS+=($REPOS)
				fi
				;;
			rm) ;& remove)
				OPTS=(-f --force $REPOS)
				;;
			cr) ;& create)
				OPTS=(-m --migrate)
				;;
			do)
				# Suggest the -f / --force option and repository names, if the user has
				# not yet typed --.
				local TYPING_COMMAND=false
				for ((I = 2; I < $COMP_CWORD; I++)); do
					if [[ "${COMP_WORDS[$I]}" = -- ]]; then
						TYPING_COMMAND=true
						break
					fi
				done
				if ! $TYPING_COMMAND; then
					OPTS=(-f --force $REPOS)
				fi
				;;
			fe) ;& foreach)
				# Suggest the -f / --force option, if the user is typing the argument
				# immediately following 'gp foreach'.
				if [[ $COMP_CWORD = 2 ]]; then
					OPTS=(-f --force)
				fi
				;;
			i) ;& init)
				OPTS=(-F --follow-git -u --update-gitignore)
				;;
			ls) ;& list)
				OPTS=(-p --porcelain -H --human-readable)
				;;
			help)
				OPTS=(co checkout cr create do i init ls list fe foreach)
				;;
		esac
	fi

   COMPREPLY=($(compgen -W "${OPTS[*]}" -- "${COMP_WORDS[$COMP_CWORD]}"))
}

complete -F _gp gp
complete -F _git_parallel git-parallel
